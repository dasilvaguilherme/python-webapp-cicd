name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checar o código
        uses: actions/checkout@v2
      
      - name: Configurar Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Executar testes unitários
        run: |
          pytest

  build-docker-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checar o código
        uses: actions/checkout@v2
      
      - name: Construir e publicar a aplicação Docker com versionamento
        run: |
          docker build -t python-webapp-cicd .
          docker tag python-webapp-cicd ${{ secrets.DOCKER_USERNAME }}/python-webapp-cicd:latest
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/python-webapp-cicd:latest
    
      - name: Criar Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}-${{ github.sha }}
          release_name: Release ${{ github.ref }}-${{ github.sha }}
          draft: false
          prerelease: false

      - name: Armazenar artefato como release do GitHub
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./python-webapp-cicd.tar.gz
          asset_name: python-webapp-cicd-${{ github.sha }}.tar.gz
          asset_content_type: application/gzip

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: 
    - build-python
    if: success()
    environment:
      name: staging
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v2

      - name: Deploy para ambiente de staging
        run: |
          echo "Simulando deploy para o ambiente de staging..."
          # Cenario em que o ambiente staging existe
          # docker pull ${{ secrets.DOCKER_USERNAME }}/python-webapp-cicd:staging
          # docker stop python-webapp-cicd || true
          # docker rm python-webapp-cicd || true
          # docker run -d --name python-webapp-cicd -p 8080:80 ${{ secrets.DOCKER_USERNAME }}/python-webapp-cicd:staging

      - name: Verificar deploy
        run: |
          echo "Simulando verificação do deploy no ambiente de staging..."
          # curl http://localhost:8080/health || exit 1

  notify_success:
    runs-on: ubuntu-latest
    if: success()
    needs: 
      - build-python
      - deploy-to-staging
    steps:
      - name: Notificar desenvolvedor sobre sucesso via e-mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Sucesso no Pipeline CI/CD'
          body: |
            O pipeline CI/CD foi concluído com sucesso.
            
            Detalhes do build:
            - Workflow: ${{ github.workflow }}
            - Repositório: ${{ github.repository }}
            - Branch: ${{ github.ref }}
            - Commit: ${{ github.sha }}
            - Autor do commit: ${{ github.actor }}
            
            Artefatos gerados:
            - Nome do artefato: python-webapp-cicd
            - Caminho do artefato: github.com/dasilvaguilherme/python-webapp-cicd/artifact
            
            Link para o workflow:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: dasilva.guilherme.582@gmail.com
          from: ${{ secrets.SMTP_USERNAME }}

  notify_failure:
    runs-on: ubuntu-latest
    if: failure()
    needs:
      - build-python
    steps:
      - name: Notificar desenvolvedor sobre falha via e-mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Falha no Pipeline CI/CD'
          body: |
            O pipeline CI/CD falhou em uma das etapas.
            
            A falha ocorreu na etapa: ${{ job.status == 'failure' && github.job || 'desconhecida' }}.
            
            Detalhes da falha:
            - Job que falhou: ${{ github.job }}
            - Workflow: ${{ github.workflow }}
            - Repositório: ${{ github.repository }}
            - Branch: ${{ github.ref }}
            
            Verifique os logs no GitHub Actions para mais detalhes:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: dasilva.guilherme.582@gmail.com
          from: ${{ secrets.SMTP_USERNAME }}